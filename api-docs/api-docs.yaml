openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: https://localhost:8443
    description: Generated server url
paths:
  /api/profiles/{username}:
    put:
      tags:
        - api-edit-profile-controller
      operationId: editProfile
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
        - name: alias
          in: query
          required: false
          schema:
            type: string
        - name: email
          in: query
          required: false
          schema:
            type: string
        - name: description
          in: query
          required: false
          schema:
            type: string
        - name: password
          in: query
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User_UserBasicView'
  /api/books/{id}:
    get:
      tags:
        - api-book-controller
      operationId: getBook
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
    put:
      tags:
        - api-book-controller
      operationId: editBook
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /email/send:
    post:
      tags:
        - email-controller
      operationId: sendEmail
      parameters:
        - name: to
          in: query
          required: true
          schema:
            type: string
        - name: subject
          in: query
          required: true
          schema:
            type: string
        - name: text
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/reviews/book/{id}:
    get:
      tags:
        - api-review-controller
      operationId: getReviews
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
    post:
      tags:
        - api-review-controller
      operationId: addReview
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review_ReviewBasicView'
        required: true
      responses:
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Review_ReviewBasicView'
  /api/books/wanted/{id}:
    post:
      tags:
        - api-user-lists-controller
      operationId: addWantedBook
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Book_BasicInfo'
  /api/books/reading/{id}:
    post:
      tags:
        - api-user-lists-controller
      operationId: addReadingBook
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Book_BasicInfo'
  /api/books/read/{id}:
    post:
      tags:
        - api-user-lists-controller
      operationId: addReadBook
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Book_BasicInfo'
  /api/auth/refresh:
    post:
      tags:
        - api-login-controller
      operationId: refreshToken
      parameters:
        - name: refreshToken
          in: cookie
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/auth/logout:
    post:
      tags:
        - api-login-controller
      operationId: logOut
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/auth/login:
    post:
      tags:
        - api-login-controller
      operationId: login
      parameters:
        - name: accessToken
          in: cookie
          required: false
          schema:
            type: string
        - name: refreshToken
          in: cookie
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/users:
    get:
      tags:
        - api-search-results-page-controller
      operationId: loadSearchResultsPageUsers
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
        - name: page
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/users/readings:
    get:
      tags:
        - api-statistics-controller
      operationId: getUsersTotalReadings
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/users/me:
    get:
      tags:
        - api-user-lists-controller
      operationId: getUserInfo
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/users/all:
    get:
      tags:
        - api-statistics-controller
      operationId: getTotalUsers
      parameters:
        - name: count
          in: query
          required: true
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/reviews/{reviewID}:
    get:
      tags:
        - api-review-controller
      operationId: getReview
      parameters:
        - name: reviewID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
    delete:
      tags:
        - api-review-controller
      operationId: deleteReview
      parameters:
        - name: reviewID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/genres:
    get:
      tags:
        - api-statistics-controller
      operationId: getMostReadGenresGeneral
      parameters:
        - name: count
          in: query
          required: true
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/genres/me:
    get:
      tags:
        - api-statistics-controller
      operationId: getMostReadGenresUser
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/genres/all:
    get:
      tags:
        - api-statistics-controller
      operationId: getTotalGenres
      parameters:
        - name: count
          in: query
          required: true
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/books:
    get:
      tags:
        - api-search-results-page-controller
      operationId: loadSearchResultsPageBooks
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
        - name: page
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/books/me:
    get:
      tags:
        - api-user-lists-controller
      operationId: getUserLists
      parameters:
        - name: list
          in: query
          required: true
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/books/me/recommended:
    get:
      tags:
        - api-statistics-controller
      operationId: recommendedBooks
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: by
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/books/all:
    get:
      tags:
        - api-statistics-controller
      operationId: getTotalBooks
      parameters:
        - name: count
          in: query
          required: true
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/authors:
    get:
      tags:
        - api-statistics-controller
      operationId: getMostReadAuthorsGeneral
      parameters:
        - name: count
          in: query
          required: true
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/authors/me:
    get:
      tags:
        - api-statistics-controller
      operationId: getMostReadAuthorsUser
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/authors/all:
    get:
      tags:
        - api-statistics-controller
      operationId: getTotalAuthors
      parameters:
        - name: count
          in: query
          required: true
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/books/lists/{id}:
    delete:
      tags:
        - api-user-lists-controller
      operationId: removeBookFromLists
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Book_BasicInfo'
components:
  schemas:
    Book_UserBasicView:
      type: object
      properties:
        id:
          type: integer
          format: int64
        isbn:
          type: string
    User_UserBasicView:
      type: object
      properties:
        username:
          type: string
        roles:
          type: array
          items:
            type: string
        alias:
          type: string
        description:
          type: string
        profileImageString:
          type: string
        email:
          type: string
        readBooks:
          type: array
          items:
            $ref: '#/components/schemas/Book_UserBasicView'
        readingBooks:
          type: array
          items:
            $ref: '#/components/schemas/Book_UserBasicView'
        wantedBooks:
          type: array
          items:
            $ref: '#/components/schemas/Book_UserBasicView'
        role:
          type: array
          items:
            type: string
    Book_ReviewBasicView:
      type: object
      properties:
        id:
          type: integer
          format: int64
        isbn:
          type: string
    Review_ReviewBasicView:
      type: object
      properties:
        ID:
          type: integer
          format: int64
        title:
          type: string
        authorName:
          type: string
        rating:
          type: integer
          format: int32
        content:
          type: string
        id:
          type: integer
          format: int64
        user:
          $ref: '#/components/schemas/User_ReviewBasicView'
    User_ReviewBasicView:
      type: object
      properties:
        readBooks:
          type: array
          items:
            $ref: '#/components/schemas/Book_ReviewBasicView'
        readingBooks:
          type: array
          items:
            $ref: '#/components/schemas/Book_ReviewBasicView'
        wantedBooks:
          type: array
          items:
            $ref: '#/components/schemas/Book_ReviewBasicView'
        role:
          type: array
          items:
            type: string
    Book_BasicInfo:
      type: object
      properties:
        ID:
          type: integer
          format: int64
        title:
          type: string
        authorString:
          type: string
        description:
          type: string
        releaseDate:
          type: string
        ISBN:
          type: string
        averageRating:
          type: number
          format: double
        series:
          type: string
        pageCount:
          type: integer
          format: int32
        publisher:
          type: string
        id:
          type: integer
          format: int64
        isbn:
          type: string
    AuthResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - SUCCESS
            - FAILURE
        message:
          type: string
        error:
          type: string
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
